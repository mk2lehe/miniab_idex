# These macros are required for Fluidd to correctly function.
# You can copy these entries into your printer.cfg.
# 
# Alternatively, import this file by adding
# this line into your printer.cfg;
# 
# [include client_macros.cfg]

[gcode_macro check_z_tilt]
variable_z2_rel_z1: -1.660 # distance between z1 and z2 endstops, in mm. If z2 is lower, this number is negative.
variable_mm_per_click: 0.16 # 8 mm pitch / 200 steps(?) 
gcode:
  {action_respond_info("For optimum z2, move your Z2 nut %.3f mm" % (printer.probe.last_z_result - (printer.configfile.settings.stepper_z.position_endstop + z2_rel_z1)))}
  {% if (printer.configfile.settings.stepper_z.position_endstop + z2_rel_z1) - printer.probe.last_z_result < 0 %}
      {action_respond_info("which is %.1f clicks CW" % ((printer.probe.last_z_result - (printer.configfile.settings.stepper_z.position_endstop + z2_rel_z1))/mm_per_click))}
  {% else %}
      {action_respond_info("which is %.1f clicks CCW" % (((printer.configfile.settings.stepper_z.position_endstop + z2_rel_z1) - printer.probe.last_z_result)/mm_per_click))}
  {% endif %} 

###########################################
# M106 [P<index>] [S<speed>] 
#   [P<index>]	Fan index
#   [S<speed>]  Speed, from 0 to 255
#     S255 provides 100% duty cycle
#     S128 produces 50% duty cycle
###########################################

[gcode_macro M106]
# rename_existing: M106.1
# If you do not need the [fan] - Setup rename_existing: M106.1 not needed at that.

gcode:
  #### set default and do convertion ####
  {% set speed = params.S|default(255)|float / 255.0 %}
  #### define fan based om extruder ####
  {% if printer.toolhead.extruder == 'extruder' %}
    {% set fanX = 1  %}
  {% else %}
    {% set fanX = 2  %}
  {% endif %}
  #### end of definition ####  
  {% if params.P is defined %}
    SET_FAN_SPEED FAN=fanX{params.P} SPEED={speed}
  {% else %}
    SET_FAN_SPEED FAN=fanX{fanX} SPEED={speed}
  {% endif %}

[gcode_macro M107]
# rename_existing: M107.1
# If you do not need the [fan] - Setup rename_existing: M107.1 not needed at that.

gcode:
    {% if params.P is defined %}
      SET_FAN_SPEED FAN=fanX{params.P} SPEED=0.0     
    {% else %}
      SET_FAN_SPEED FAN=fanX1 SPEED=0.0
      SET_FAN_SPEED FAN=fanX2 SPEED=0.0     
    {% endif %}

###########################################################

[gcode_macro PRINT_START]
gcode:
    POWER_ON_PRINTER
    UPDATE_LED
    CLEAR_PAUSE
    SET_IDLE_TIMEOUT TIMEOUT=600
    G21 ; set units to millimeters START custom START GCODE
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion
#    M104 S[first_layer_temperature] ; set extruder temp
#    M140 S[first_layer_bed_temperature] ; set bed temp
#    M109 S[first_layer_temperature] ; wait for extruder temp
    M104 T1 S{EXTRUDER1} ; set extruder temp
    M109 T0 S{EXTRUDER} ; wait for extruder temp
    UPDATE_LED
    G28; Home
#    M190 S[first_layer_bed_temperature] ; wait for bed temp
    T1
    G1 X240 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 E5 F500; Purge some filament
    G1 X220 Y2 Z0.3 F5000.0 ; Move to start position
    G1 X160 Y2 Z0.3 F500.0 E10 ; Draw a 60mm long prime line using 10 mm of filament
    G1 Z2 F3000 ; Move Z up a little 
    G92 E0 ;Reset E position STOP custom start GCODE
    T0
    G1 X-44 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 E5 F500; Purge some filament
    G1 X0 Y2 Z0.3 F5000.0 ; Move to start position
    G1 X60 Y2 Z0.3 F500.0 E10 ; Draw a 60mm long prime line using 10 mm of filament
    G1 Z2 F3000 ; Move Z up a little 
    G92 E0 ;Reset E position STOP custom start GCODE

[gcode_macro PRINT_END]
gcode:
    G92 E0 ; reset extruder
    G1 E-12 F1800 ; pull back some filament, was -1 mm 
    G91 ;relative positioning
    G1 Z+0.5
    G90 ;absolute positioning
    M104 S0 ; turn off temperature hotend
    M140 S0; turn off temperature bed
    G1 Y210 ;present print
    M84 ; turn steppers off
    G90 ;absolute positioning

# Helper script to park the carriage (called from T0 and T1 macros)
[gcode_macro PARK_extruder]
gcode:
    SAVE_GCODE_STATE NAME=park0
    G90
    G1 X-44 F6000
    RESTORE_GCODE_STATE NAME=park0

# Activate the primary extruder
[gcode_macro T0]
gcode:
    PARK_{printer.toolhead.extruder}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    SET_GCODE_OFFSET X=0 Y=0 Z=0

[gcode_macro PARK_extruder1]
gcode:
    SAVE_GCODE_STATE NAME=park1
    G90
    G1 X246 F6000
    RESTORE_GCODE_STATE NAME=park1

[gcode_macro T1]
gcode:
    PARK_{printer.toolhead.extruder}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1
    SET_GCODE_OFFSET X=-0.3 Y=-0.4 Z=0.2 

[gcode_macro F_CONSUMED]
variable_filament_consumed: 0
variable_filament_lenght: 200   # length between the sensor and extruder
gcode:
  # save current filament consumption
  SET_GCODE_VARIABLE MACRO=F_CONSUMED VARIABLE=filament_consumed VALUE={printer.print_stats.filament_used}
  # start checking filament consumption
  UPDATE_DELAYED_GCODE ID=DELAY_PAUSE DURATION=1

[delayed_gcode DELAY_PAUSE]
gcode:
  # use set for easier reading
  {% set consumed=printer["gcode_macro F_CONSUMED"].filament_consumed %}
  {% set length=printer["gcode_macro F_CONSUMED"].filament_lenght %}
  # check if predetermine length is reached
  {% if printer.print_stats.filament_used|float <= (consumed|float + length|float) %}
  # start looping this script every second
  UPDATE_DELAYED_GCODE ID=DELAY_PAUSE DURATION=1
  {% else %}
  PAUSE
  {% endif %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
default_parameter_E: 3
gcode:
  {% set x_park = printer.toolhead.axis_minimum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_minimum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  G91

[gcode_macro RESUME]
rename_existing: BASE_RESUME
default_parameter_E: 1      
gcode:
    G91
    G1 E{E} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="tplink_smartplug",
                             state="off")}

[gcode_macro POWER_ON_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="tplink_smartplug",
                             state="on")}
  G4 P1000

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    G91
    G1 E-10.0 F500
    G90

[gcode_macro LOAD_FILAMENT]
gcode:
    G91
    G1 E10.0 F500
    G90

[gcode_macro UPDATE_LED]
gcode:
#if the extruder is off
   {% if printer.extruder.target == 0 %}
      #Set the LED to red if the extruder is off but is still hot, otherwise 
      # set the color to green
      {% if printer.extruder.temperature > 60.0 %}
        Set_pin pin=red value=1
		    Set_pin pin=green value=0
		    Set_pin pin=blue value=0
      {% elif printer.extruder.temperature > 30.0 %}
        Set_pin pin=red value=0
		    Set_pin pin=green value=1
		    Set_pin pin=blue value=0
	    {% else %}
        Set_pin pin=red value=0
		    Set_pin pin=green value=0
		    Set_pin pin=blue value=0
      {% endif %}     
   {% else %}
      #if the extruder temp is at target temperature 
      {% if printer.extruder.temperature >= printer.extruder.target - 4.0 %}
        Set_pin pin=red value=1
		    Set_pin pin=green value=1
		    Set_pin pin=blue value=1
      #if the extruder is still heating
      {% else %}
        {% set scaler = printer.extruder.temperature|float / printer.extruder.target|float %}
			    Set_pin pin=red value={ scaler|float * 1 }
          Set_pin pin=green value=0
	        Set_pin pin=blue value=0
      {% endif %}
   {% endif %}

[gcode_macro HEATSOAK]
gcode:
    SET_IDLE_TIMEOUT TIMEOUT=1800
    POWER_ON_PRINTER
    M104 S100 ; set extruder temp, do not wait
    M140 S100 ; set bed temp, do not wait
    Set_pin pin=red value=1
